{"ast":null,"code":"// ----------------------------------------------------------------------\nexport const stylesMode={light:'[data-mui-color-scheme=\"light\"] &',dark:'[data-mui-color-scheme=\"dark\"] &'};export const mediaQueries={upXs:'@media (min-width:0px)',upSm:'@media (min-width:600px)',upMd:'@media (min-width:900px)',upLg:'@media (min-width:1200px)',upXl:'@media (min-width:1536px)'};/**\n * Set font family\n */export function setFont(fontName){return`\"${fontName}\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\"`;}/**\n * Converts rem to px\n */export function remToPx(value){return Math.round(parseFloat(value)*16);}/**\n * Converts px to rem\n */export function pxToRem(value){return`${value/16}rem`;}/**\n * Responsive font sizes\n */export function responsiveFontSizes(_ref){let{sm,md,lg}=_ref;return{[mediaQueries.upSm]:{fontSize:pxToRem(sm)},[mediaQueries.upMd]:{fontSize:pxToRem(md)},[mediaQueries.upLg]:{fontSize:pxToRem(lg)}};}/**\n * Converts a hex color to RGB channels\n */export function hexToRgbChannel(hex){if(!/^#[0-9A-F]{6}$/i.test(hex)){throw new Error(`Invalid hex color: ${hex}`);}const r=parseInt(hex.substring(1,3),16);const g=parseInt(hex.substring(3,5),16);const b=parseInt(hex.substring(5,7),16);return`${r} ${g} ${b}`;}/**\n * Converts a hex color to RGB channels\n */export function createPaletteChannel(hexPalette){const channelPalette={};Object.entries(hexPalette).forEach(_ref2=>{let[key,value]=_ref2;channelPalette[`${key}Channel`]=hexToRgbChannel(value);});return{...hexPalette,...channelPalette};}/**\n * Color with alpha channel\n */export function varAlpha(color){let opacity=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;const unsupported=color.startsWith('#')||color.startsWith('rgb')||color.startsWith('rgba')||!color.includes('var')&&color.includes('Channel');if(unsupported){throw new Error(`[Alpha]: Unsupported color format \"${color}\".\n       Supported formats are:\n       - RGB channels: \"0 184 217\".\n       - CSS variables with \"Channel\" prefix: \"var(--palette-common-blackChannel, #000000)\".\n       Unsupported formats are:\n       - Hex: \"#00B8D9\".\n       - RGB: \"rgb(0, 184, 217)\".\n       - RGBA: \"rgba(0, 184, 217, 1)\".\n       `);}return`rgba(${color} / ${opacity})`;}","map":{"version":3,"names":["stylesMode","light","dark","mediaQueries","upXs","upSm","upMd","upLg","upXl","setFont","fontName","remToPx","value","Math","round","parseFloat","pxToRem","responsiveFontSizes","_ref","sm","md","lg","fontSize","hexToRgbChannel","hex","test","Error","r","parseInt","substring","g","b","createPaletteChannel","hexPalette","channelPalette","Object","entries","forEach","_ref2","key","varAlpha","color","opacity","arguments","length","undefined","unsupported","startsWith","includes"],"sources":["/home/deva/Desktop/shivam/infore/src/theme/styles/utils.ts"],"sourcesContent":["// ----------------------------------------------------------------------\n\nexport const stylesMode = {\n  light: '[data-mui-color-scheme=\"light\"] &',\n  dark: '[data-mui-color-scheme=\"dark\"] &',\n};\n\nexport const mediaQueries = {\n  upXs: '@media (min-width:0px)',\n  upSm: '@media (min-width:600px)',\n  upMd: '@media (min-width:900px)',\n  upLg: '@media (min-width:1200px)',\n  upXl: '@media (min-width:1536px)',\n};\n\n/**\n * Set font family\n */\nexport function setFont(fontName: string) {\n  return `\"${fontName}\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\"`;\n}\n\n/**\n * Converts rem to px\n */\nexport function remToPx(value: string): number {\n  return Math.round(parseFloat(value) * 16);\n}\n\n/**\n * Converts px to rem\n */\nexport function pxToRem(value: number): string {\n  return `${value / 16}rem`;\n}\n\n/**\n * Responsive font sizes\n */\nexport function responsiveFontSizes({ sm, md, lg }: { sm: number; md: number; lg: number }) {\n  return {\n    [mediaQueries.upSm]: { fontSize: pxToRem(sm) },\n    [mediaQueries.upMd]: { fontSize: pxToRem(md) },\n    [mediaQueries.upLg]: { fontSize: pxToRem(lg) },\n  };\n}\n\n/**\n * Converts a hex color to RGB channels\n */\nexport function hexToRgbChannel(hex: string) {\n  if (!/^#[0-9A-F]{6}$/i.test(hex)) {\n    throw new Error(`Invalid hex color: ${hex}`);\n  }\n\n  const r = parseInt(hex.substring(1, 3), 16);\n  const g = parseInt(hex.substring(3, 5), 16);\n  const b = parseInt(hex.substring(5, 7), 16);\n\n  return `${r} ${g} ${b}`;\n}\n\n/**\n * Converts a hex color to RGB channels\n */\nexport function createPaletteChannel(hexPalette: Record<string, string>) {\n  const channelPalette: Record<string, string> = {};\n\n  Object.entries(hexPalette).forEach(([key, value]) => {\n    channelPalette[`${key}Channel`] = hexToRgbChannel(value);\n  });\n\n  return { ...hexPalette, ...channelPalette };\n}\n\n/**\n * Color with alpha channel\n */\nexport function varAlpha(color: string, opacity = 1) {\n  const unsupported =\n    color.startsWith('#') ||\n    color.startsWith('rgb') ||\n    color.startsWith('rgba') ||\n    (!color.includes('var') && color.includes('Channel'));\n\n  if (unsupported) {\n    throw new Error(\n      `[Alpha]: Unsupported color format \"${color}\".\n       Supported formats are:\n       - RGB channels: \"0 184 217\".\n       - CSS variables with \"Channel\" prefix: \"var(--palette-common-blackChannel, #000000)\".\n       Unsupported formats are:\n       - Hex: \"#00B8D9\".\n       - RGB: \"rgb(0, 184, 217)\".\n       - RGBA: \"rgba(0, 184, 217, 1)\".\n       `\n    );\n  }\n\n  return `rgba(${color} / ${opacity})`;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}